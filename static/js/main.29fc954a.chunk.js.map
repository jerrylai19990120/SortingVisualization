{"version":3,"sources":["panel.js","App.js","serviceWorker.js","index.js"],"names":["Panel","props","state","array","color","buttons","document","getElementsByClassName","i","length","disabled","cols","style","backgroundColor","this","num1","num2","index1","index2","milisecs","columns","setTimeout","temp","height","Math","floor","random","rand","nums","randNum","push","setState","resetColors","generateArray","temp3","numbers","disableButtons","j","counter","k","swap","animation","colorAnimation","a","enableButtons","minIndex","low","high","pivot","sleep","tempColor","partition","pivotIndex","quickSort","start","end","changes","middle","mergeSort","merge","sorted","index","value","n","largest","l","r","heapify","size","Promise","resolve","unsorted","mergeSortAnimation","key","className","paddingLeft","type","onClick","border","bubbleSort","selectionSort","mergeSortCombine","heapSort","insertionSort","defaultValue","width","float","marginLeft","marginTop","onChange","val","arr","pop","min","max","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29fc954a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { Slider, Button } from \"antd\";\n\n\nclass Panel extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            color: '#F646AB'\n        }\n    }\n\n    disableButtons(){\n        const buttons = document.getElementsByClassName('sort-click');\n        \n        for(let i=0;i<buttons.length;i++){\n            buttons[i].disabled = true;\n        }\n    }\n\n    enableButtons(){\n        const buttons = document.getElementsByClassName('sort-click');\n        for(let i=0;i<buttons.length;i++){\n            buttons[i].disabled = false;\n        }\n    }\n\n    resetColors(){\n        const cols = document.getElementsByClassName('column');\n        for(let i=0;i<cols.length;i++){\n            cols[i].style.backgroundColor = this.state.color;\n        }\n    }\n\n\n    swap(num1, num2){\n        return [num2, num1];\n    }\n\n    animation(index1, index2, milisecs){\n\n        const columns = document.getElementsByClassName('column');\n\n        setTimeout(() => {\n            var temp = columns[index1].style.height;\n            columns[index1].style.height = columns[index2].style.height;\n            columns[index2].style.height = temp;\n        }, milisecs);\n    }\n\n    randNum(){\n        return Math.floor(Math.random()*500);\n    }\n\n    generateArray(){\n        const nums = [];\n        var rand;\n        for(let i=0;i<150;i++){\n            rand = this.randNum();\n            nums.push(rand);\n        }\n        this.setState({array: nums});\n        this.setState({color: '#F646AB'});\n        this.resetColors();\n    }\n\n    changeSize(){\n\n    }\n\n    componentDidMount(){\n        this.generateArray();\n    }\n\n    colorAnimation(index1, index2, milisecs){\n\n        const columns = document.getElementsByClassName('column');\n\n        setTimeout(() => {\n            var temp3 = columns[index1].style.backgroundColor;\n            columns[index1].style.backgroundColor = columns[index2].style.backgroundColor;\n            columns[index2].style.backgroundColor = temp3;\n        }, milisecs);\n\n    }\n\n    bubbleSort(numbers){\n\n        this.disableButtons();\n\n        let milisecs = 100;\n        for(let j=0;j<numbers.length-1;j++){\n            let counter = 0;\n            setTimeout(() => {\n                document.getElementsByClassName('column')[counter].style.backgroundColor = '#5FDA70';\n                counter++;\n            }, milisecs+2);\n\n            for(let k=0;k<numbers.length-j-1;k++){\n                milisecs+=2;\n                if(numbers[k]>numbers[k+1]){  \n                    [numbers[k], numbers[k+1]] = this.swap(numbers[k], numbers[k+1]);\n                    this.animation(k, k+1, milisecs);\n                    this.colorAnimation(k, k+1, milisecs);\n                }else{\n                    this.colorAnimation(k, k+1, milisecs);\n                }\n            }\n        }\n\n        setTimeout(() => {\n            const cols = document.getElementsByClassName('column');\n            for(let a=0;a<cols.length;a++){\n                if(cols[a].style.backgroundColor !== '#5FDA70'){\n                    cols[a].style.backgroundColor = '#5FDA70';\n                }\n            }\n            this.enableButtons();\n        }, milisecs);\n    }\n\n\n    selectionSort(numbers){\n\n        this.disableButtons();\n\n        var minIndex;\n        let milisecs = 100;\n\n        for(let i=0;i<numbers.length;i++){\n            minIndex = i;\n            \n            for(let j=i+1;j<numbers.length;j++){\n                \n                if(numbers[minIndex]>numbers[j]){\n                    minIndex = j;\n                    \n                }\n            }\n            let counter = minIndex;\n            setTimeout(() => {\n                document.getElementsByClassName('column')[counter].style.backgroundColor = '#5FDA70';\n            }, milisecs);\n        \n            [numbers[minIndex], numbers[i]] = this.swap(numbers[minIndex], numbers[i]);\n            milisecs += 100;\n            this.animation(minIndex, i, milisecs);\n            this.colorAnimation(minIndex, i, milisecs);\n        }\n\n        setTimeout(() => {\n            this.enableButtons();\n        }, milisecs);\n    }\n\n    async partition(numbers, low, high){\n        let i = low;\n        let pivot = numbers[high];\n        let cols = document.getElementsByClassName('column');\n        \n        for(let j=low;j<high;j++){\n            cols[j].style.backgroundColor = '#5FDA70';\n            if(numbers[j]<pivot){\n                await this.sleep(66);\n                [numbers[j], numbers[i]] = this.swap(numbers[j], numbers[i]);\n                let temp = cols[j].style.height;\n                cols[j].style.height = cols[i].style.height;\n                cols[i].style.height = temp;\n                let tempColor = cols[high].style.backgroundColor;\n                cols[high].style.backgroundColor = cols[i].style.backgroundColor;\n                cols[i].style.backgroundColor = tempColor;\n                i++; \n            }\n        }\n        await this.sleep(36);\n        [numbers[i], numbers[high]] = this.swap(numbers[i], numbers[high]);\n        let temp = cols[high].style.height;\n        cols[high].style.height = cols[i].style.height;\n        cols[i].style.height = temp;\n        return i;\n\n    }\n\n    async quickSort(numbers, low, high){\n\n        this.disableButtons();\n\n        if(low<high){\n\n            let pivotIndex = await this.partition(numbers, low, high);\n\n            this.quickSort(numbers, low, pivotIndex-1);\n            this.quickSort(numbers, pivotIndex+1, high);\n\n        }\n\n    }\n\n    mergeSort(numbers, start,  end, changes){\n\n        if(start!==end){\n            let middle = Math.floor((start+end)/2);\n            this.mergeSort(numbers, start, middle, changes);\n            this.mergeSort(numbers, middle+1, end, changes);\n            this.merge(numbers, start, middle, end, changes);\n        }\n    }\n\n    merge(numbers, start, middle, end, changes){\n\n        const sorted = [];\n            \n        let i = start;    \n        let j = middle+1;         \n\n        while(i<=middle && j<=end){\n            if(numbers[i]>numbers[j]){\n                \n                changes.push([start+sorted.length, numbers[j]]);\n                sorted.push(numbers[j]); \n                j++;\n            }else{\n                changes.push([start+sorted.length, numbers[i]]);\n                sorted.push(numbers[i]);\n                i++;\n            }\n        }        \n\n        while(i<=middle){\n            changes.push([start+sorted.length, numbers[i]]);\n            sorted.push(numbers[i]);\n            \n            i++;\n        }\n\n        while(j<=end){\n            changes.push([start+sorted.length, numbers[j]]);\n            sorted.push(numbers[j]);\n            \n            j++;\n        }\n        for (let k = start; k <= end; k++) {\n            numbers[k] = sorted[k - start];\n        }\n    }\n\n    async mergeSortAnimation(changes){\n        await this.sleep();\n        let columns = document.getElementsByClassName('column');\n        for(let i=0;i<changes.length;i++){\n            await this.sleep(8);\n            let [index, value] = changes[i];\n            columns[index].style.height = `${value}px`;\n            columns[index].style.backgroundColor = '#5FDA70';\n        }\n    }\n\n            \n\n    \n\n    heapify(numbers, n, i){\n        let largest = i;\n        let l = 2*i+1;\n        let r = 2*i+2;\n        let cols = document.getElementsByClassName('column');\n\n        if(l<n && numbers[i]<numbers[l]){\n            largest = l;\n        }\n        if(r<n && numbers[largest]<numbers[r]){\n            largest = r;\n        }\n\n        if(largest !== i){\n            [numbers[i], numbers[largest]] = this.swap(numbers[i], numbers[largest]);\n            let temp = cols[i].style.height;\n            cols[i].style.height = cols[largest].style.height;\n            cols[largest].style.height = temp;\n            this.heapify(numbers, n, largest);\n        }\n\n    }\n\n    async heapSort(numbers){\n\n        this.disableButtons();\n        let size = numbers.length;\n        let cols = document.getElementsByClassName('column');\n\n        for(let i=Math.floor(size/2-1);i>-1;i--){\n            this.heapify(numbers, size, i);\n        }\n\n        for(let i=size-1; i>0;i--){\n            cols[i].style.backgroundColor = '#5FDA70';\n            await this.sleep(100);\n            [numbers[i], numbers[0]] = this.swap(numbers[i], numbers[0]);\n            let temp = cols[i].style.height;\n            cols[i].style.height = cols[0].style.height;\n            cols[0].style.height = temp;\n            this.heapify(numbers, i, 0);\n        }\n\n        cols[0].style.backgroundColor = '#5FDA70';\n        this.enableButtons();\n\n    }\n\n    sleep(milisecs){\n        return new Promise(resolve => setTimeout(resolve, milisecs));\n    }\n\n    async insertionSort(numbers){\n\n        for(let i=1;i<numbers.length;i++){\n            let columns = document.getElementsByClassName('column');\n            let minIndex = i;\n            let unsorted = numbers[minIndex];\n            let j = i-1;\n            \n            while(j >= 0 && unsorted<numbers[j]){\n                await this.sleep(6);\n                for(let k=0;k<=j;k++){\n                    columns[k].style.backgroundColor = '#5FDA70';\n                }\n                [numbers[minIndex], numbers[j]] = this.swap(numbers[minIndex], numbers[j]);\n                let temp = columns[minIndex].style.height;\n                let tempColor = columns[minIndex].style.backgroundColor;\n                columns[minIndex].style.height = columns[j].style.height;\n                columns[j].style.height = temp;\n                columns[minIndex].style.backgroundColor = columns[j].style.backgroundColor;\n                columns[j].style.backgroundColor = tempColor;\n                minIndex = j;\n                j--;\n            }\n\n        }\n\n        let cols = document.getElementsByClassName('column');;\n\n        for(let i=0;i<cols.length;i++){\n            if(cols[i].style.backgroundColor !== '#5FDA70'){\n                cols[i].style.backgroundColor = '#5FDA70';\n            }\n        }\n\n\n    }\n\n    mergeSortCombine(numbers, start, end){\n        const changes = [];\n        this.mergeSort(numbers, start, end, changes);\n        this.mergeSortAnimation(changes);\n    }\n\n\n\n\n    render(){\n\n        const cols = [];\n        \n\n        for(let i=0;i<this.state.array.length;i++){\n            cols.push(<div key={i} className='column' style={{height: this.state.array[i], backgroundColor: this.state.color}}/>)\n        }\n\n        const changeSize = (value) => {\n            let cols = document.getElementsByClassName('column');\n            let val = value - this.state.array.length;\n\n            if(val>0){\n                let arr = this.state.array;\n                while(val>0){\n                    arr.push(this.randNum());\n                    val--;\n                }\n                this.setState({array: arr});\n                if(this.state.array.length<50){\n                    for(let i=0;i<cols.length;i++){\n                        cols[i].style.width = '12px';\n                    }\n                }else if(this.state.array.length>=50 && this.state.array.length<126){\n                    for(let i=0;i<cols.length;i++){\n                        cols[i].style.width = '6px';\n                    }\n                }else if(this.state.array.length>=126){\n                    for(let i=0;i<cols.length;i++){\n                        cols[i].style.width = '3px';\n                    }\n                }\n            }else if(val<0){\n                let arr = this.state.array;\n                while(val<0){\n                    arr.pop();\n                    val++;\n                }\n                this.setState({array: arr});\n                if(this.state.array.length<50){\n                    for(let i=0;i<cols.length;i++){\n                        cols[i].style.width = '12px';\n                    }\n                }else if(this.state.array.length>=50 && this.state.array.length<126){\n                    for(let i=0;i<cols.length;i++){\n                        cols[i].style.width = '6px';\n                    }\n                }else if(this.state.array.length>=126){\n                    for(let i=0;i<cols.length;i++){\n                        cols[i].style.width = '3px';\n                    }\n                }\n\n            }\n\n\n        }\n\n\n        \n        return(\n\n            <div>\n                <div style={{paddingLeft: '180px'}}>\n                <Button type=\"primary\" className=\"sort-click\" onClick={()=> this.generateArray()} style={{backgroundColor:'#242F43', color:'#FFCB35', border:'1px solid #FFCB35'}}>Generate New Array</Button>\n                <Button type=\"primary\" className=\"sort-click\" onClick={()=> this.bubbleSort(this.state.array)} style={{backgroundColor:'#242F43', color:'#FFCB35', border:'1px solid #FFCB35'}}>Bubble Sort</Button>\n                <Button type=\"primary\" className=\"sort-click\" onClick={()=> this.selectionSort(this.state.array)} style={{backgroundColor:'#242F43', color:'#FFCB35', border:'1px solid #FFCB35'}}>Selection Sort</Button>\n                <Button type=\"primary\" className=\"sort-click\" onClick={()=> this.mergeSortCombine(this.state.array, 0, this.state.array.length-1)} style={{backgroundColor:'#242F43', color:'#FFCB35', border:'1px solid #FFCB35'}}>Merge Sort</Button>\n                <Button type=\"primary\" className=\"sort-click\" onClick={()=> this.quickSort(this.state.array, 0, this.state.array.length-1)} style={{backgroundColor:'#242F43', color:'#FFCB35', border:'1px solid #FFCB35'}}>Quick Sort</Button>\n                <Button type=\"primary\" className=\"sort-click\" onClick={()=> this.heapSort(this.state.array)} style={{backgroundColor:'#242F43', color:'#FFCB35', border:'1px solid #FFCB35'}}>Heap Sort</Button>\n                <Button type=\"primary\" className=\"sort-click\" onClick={()=> this.insertionSort(this.state.array)} style={{backgroundColor:'#242F43', color:'#FFCB35', border:'1px solid #FFCB35'}}>Insertion Sort</Button>\n                <Slider defaultValue={150} style={{width: '88px', float: 'left', marginLeft:'20px', marginTop:'46px'}} onChange={changeSize} min={1} max={250}/>\n                </div>\n            <div className=\"cols_container\" style={{float: 'left', marginTop: '88px', marginLeft:'226px'}}>\n\n                {cols}\n                \n            </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Panel;","import React from 'react';\nimport './App.css';\nimport Panel from './panel'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Panel />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}